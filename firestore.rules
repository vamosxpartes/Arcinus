rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones helper para verificar permisos - definidas al inicio del servicio
    function isAuthenticated() {
      return request.auth != null;
    }

    function hasRole(role, academyId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/academies/$(academyId)/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/academies/$(academyId)/users/$(request.auth.uid)).data.role == role;
    }

    function isSuperAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/superadmins/$(request.auth.uid));
    }

    function isAcademyOwner(academyId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/academies/$(academyId)).data.academyOwnerId == request.auth.uid;
    }

    // ✅ Función renombrada para mayor claridad
    function hasManagerPermissions(academyId) {
      return isSuperAdmin() || 
        isAcademyOwner(academyId) || 
        hasRole('manager', academyId);
    }

    // Reglas para usuarios
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        request.auth.uid == userId || 
        isSuperAdmin()
      );
    }

    // Reglas para superadmins
    match /superadmins/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Reglas para owners
    match /owners/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        request.auth.uid == userId || 
        isSuperAdmin()
      );
    }

    // Reglas para academias y sus subcolecciones
    match /academies/{academyId} {
      allow read: if isAuthenticated();
      
      // Crear academia
      allow create: if isAuthenticated() && (
        exists(/databases/$(database)/documents/owners/$(request.auth.uid)) ||
        isSuperAdmin()
      );

      // Actualizar o eliminar academia
      allow update, delete: if isAcademyOwner(academyId) || isSuperAdmin();

      // Usuarios de la academia
      match /users/{userId} {
        allow read: if isAuthenticated();
        allow create: if hasManagerPermissions(academyId);
        allow update: if request.auth.uid == userId || hasManagerPermissions(academyId);
        allow delete: if hasManagerPermissions(academyId);
      }

      // Pre-registros
      match /pendingActivations/{activationId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if hasManagerPermissions(academyId);
      }
    }
  }
}

// Reglas para Storage (imágenes de perfil)
service firebase.storage {
  match /b/{bucket}/o {
    match /profile_images/{allPaths=**} {
      function isAuthenticated() {
        return request.auth != null;
      }

      // Permitir lectura a cualquier usuario autenticado
      allow read: if isAuthenticated();
      
      // Permitir subida de imágenes a usuarios autenticados
      allow create: if isAuthenticated()
        && request.resource.size < 5 * 1024 * 1024  // Máximo 5MB
        && request.resource.contentType.matches('image/.*');
      
      // Permitir actualización/eliminación solo a propietarios o admins
      allow update, delete: if isAuthenticated() && (
        resource.metadata.userId == request.auth.uid ||  // Propietario de la imagen
        resource.metadata.academyId != null &&           // O admin de la academia
        hasManagerPermissions(resource.metadata.academyId)
      );
    }
  }
}
